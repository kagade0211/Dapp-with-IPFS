{"version":3,"sources":["components/App.js","logo.png","serviceWorker.js","index.js"],"names":["ipfs","create","host","port","protocol","App","props","_this","Object","_home_branded_projects_ipfs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_branded_projects_ipfs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_branded_projects_ipfs_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","captureFile","Event","preventDefault","File","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","onSubmit","console","log","add","state","error","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","href","rel","role","src","logo","alt","Onsubmit","type","onChange","Component","module","exports","__webpack_require__","p","Boolean","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wMAKMA,EAAOC,iBAAO,CAAEC,KAAM,iBAAkBC,KAAM,OAAQC,SAAU,UAGhEC,cAEJ,SAAAA,EAAaC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAOJ,KAKTQ,YAAc,SAACC,GAGbA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,OAAOC,MAAM,GAG1BC,EAAS,IAAIC,OAAOC,WAI1BF,EAAOG,kBAAkBN,GAEzBG,EAAOI,UAAY,WAInBjB,EAAKkB,SAAY,CAACC,OAAOC,EAAOP,EAAOQ,WAxBtBrB,EA2BnBsB,SAAW,SAACd,GACVA,EAAMC,iBACNc,QAAQC,IAAK,0BACb/B,EAAKgC,IAAKzB,EAAK0B,MAAMP,OAAQ,SAACQ,EAAON,GACrCE,QAAQC,IAAI,cAAcH,GACtBM,GACFJ,QAAQI,MAAOA,MA/BjB3B,EAAK0B,MAAQ,CACbP,OAAS,MAHQnB,wEA2CjB,OACE4B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kEACbH,EAAAC,EAAAC,cAAA,KACEC,UAAU,sCACVC,KAAK,yCACLrB,OAAO,SACPsB,IAAI,uBAJN,oBASFL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMI,KAAK,OAAOH,UAAU,gCAC1BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,KACEE,KAAK,yCACLrB,OAAO,SACPsB,IAAI,uBAEJL,EAAAC,EAAAC,cAAA,OAAKK,IAAKC,IAAML,UAAU,WAAWM,IAAI,UAE3CT,EAAAC,EAAAC,cAAA,iBAIDF,EAAAC,EAAAC,cAAA,8BAEIF,EAAAC,EAAAC,cAAA,QAAMR,SAAYnB,KAAKmC,UAEvBV,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAOC,SAAUrC,KAAKI,cAClCqB,EAAAC,EAAAC,cAAA,SAAOS,KAAK,wBA7EbE,aAuFH3C,oDC/Ff4C,EAAAC,QAAiBC,EAAAC,EAAuB,mNCYpBC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAvB,EAAAC,cAAChC,EAAA,EAAD,MAASuD,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.92287ae4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from '../logo.png';\nimport './App.css';\nimport { create } from 'ipfs-http-client'\n// use local host if using local ipfs node but we are using infura free gateway\nconst ipfs = create({ host: 'ipfs.infura.io', port: '5001', protocol: 'https' })\n\n\nclass App extends Component {\n\n  constructor (props){\n    super (props);\n    this.state = {\n    buffer : null\n    };\n  }\n  captureFile = (Event) => {\n    //1. prevent defaults 2. captureFile to file constant 3. define readerobject \n    // Prevent default events\n    Event.preventDefault()\n    // fetch file from event and first file to be saved in file constant.\n    const File = Event.target.files[0]\n    //The FileReader() constructor creates a new FileReader. syntax : new FileReader()\n    //file reader object lets web applns read contents of file stored on user computer.\n    const reader = new window.FileReader()\n    //readAsArrayBuffer() method is used to start reading the contents of a specified Blob or File . \n    //When the read operation is finished, the readyState becomes DONE , and the loadend is triggered. \n    //At that time, the result attribute contains an ArrayBuffer representing the file's data\n    reader.readAsArrayBuffer(File)\n    //triggers below function to print buffer word and its conversion results in console window.\n    reader.onloadend = () => {\n    // putting file on ipfs is two step process. first upload then submit . \n    //In order to talk these to eachother, we need to use react state object\n    // console.log ('buffer', Buffer(reader.result)) hence we goona put this in state object\n    this.setState = ({buffer:Buffer(reader.result)})\n    } \n  }\n  onSubmit = (Event) => {\n    Event.preventDefault()\n    console.log ('submitting the form...')\n    ipfs.add (this.state.buffer, (error, result) => {\n    console.log('ipfs.result',result)\n    if (error) {\n      console.error (error)\n      return\n    }\n  \n  })\n}\n\n\n  \n  render() {\n    return (  \n      <div> \n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.dappuniversity.com/bootcamp\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Meme of the day \n          </a>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"http://www.dappuniversity.com/bootcamp\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </a>\n                <p>&nbsp;</p> \n                 { \n                 //&nbsp is used to give space // also for commenting in app.js file you need to // inside curly braces\n                }\n               <h2>Meme of the day </h2>\n                 {/* whenever form submitted it triggers onsubmit function then file which is in buffer will be put it on ipfs*/}\n                   <form onSubmit = {this.Onsubmit} >\n                 {/* whenever file uploaded  trigger capturefile function which captures file and further converted to buffer*/}\n                   <input type='file' onChange={this.captureFile}/> \n                   <input type='submit' />\n                   </form>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.06825633.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}