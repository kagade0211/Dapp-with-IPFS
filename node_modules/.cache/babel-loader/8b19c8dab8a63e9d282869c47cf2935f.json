{"ast":null,"code":"var _objectSpread = require(\"/home/branded/projects/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"/home/branded/projects/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/branded/projects/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/branded/projects/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar defer = require('p-defer');\n\nvar Headers = require('./extract-headers');\n\nvar LteReader = require('./lte-reader');\n\nfunction getPadding(size) {\n  size &= 511;\n  return size && 512 - size;\n}\n\nfunction discardPadding(_x, _x2) {\n  return _discardPadding.apply(this, arguments);\n}\n\nfunction _discardPadding() {\n  _discardPadding = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(reader, size) {\n    var overflow;\n    return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            overflow = getPadding(size);\n\n            if (!overflow) {\n              _context5.next = 4;\n              break;\n            }\n\n            _context5.next = 4;\n            return reader.next(overflow);\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _discardPadding.apply(this, arguments);\n}\n\nmodule.exports = function (options) {\n  options = options || {};\n  options.highWaterMark = options.highWaterMark || 1024 * 16;\n  return function (source) {\n    return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var reader, gnuLongPath, gnuLongLinkPath, paxGlobal, pax, _loop, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ret;\n\n      return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              reader = LteReader(source);\n              _context4.prev = 1;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var headerBytes, _yield$_awaitAsyncGen, done, value, header, _yield$_awaitAsyncGen2, _done, gnuLongPathBytes, _yield$_awaitAsyncGen3, _done2, gnuLongLinkPathBytes, _yield$_awaitAsyncGen4, _done3, paxGlobalBytes, _yield$_awaitAsyncGen5, _done4, paxBytes, bytesRemaining, bodyConsumed, firstChunk, body, _;\n\n                return _regeneratorRuntime().wrap(function _loop$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        headerBytes = void 0;\n                        _context3.prev = 1;\n                        _context3.next = 4;\n                        return _awaitAsyncGenerator(reader.next(512));\n\n                      case 4:\n                        _yield$_awaitAsyncGen = _context3.sent;\n                        done = _yield$_awaitAsyncGen.done;\n                        value = _yield$_awaitAsyncGen.value;\n\n                        if (!done) {\n                          _context3.next = 9;\n                          break;\n                        }\n\n                        return _context3.abrupt(\"return\", {\n                          v: void 0\n                        });\n\n                      case 9:\n                        headerBytes = value;\n                        _context3.next = 17;\n                        break;\n\n                      case 12:\n                        _context3.prev = 12;\n                        _context3.t0 = _context3[\"catch\"](1);\n\n                        if (!(_context3.t0.code === 'ERR_UNDER_READ')) {\n                          _context3.next = 16;\n                          break;\n                        }\n\n                        return _context3.abrupt(\"return\", {\n                          v: void 0\n                        });\n\n                      case 16:\n                        throw _context3.t0;\n\n                      case 17:\n                        header = Headers.decode(headerBytes, options.filenameEncoding);\n\n                        if (header) {\n                          _context3.next = 20;\n                          break;\n                        }\n\n                        return _context3.abrupt(\"return\", \"continue\");\n\n                      case 20:\n                        if (!(header.type === 'gnu-long-path')) {\n                          _context3.next = 32;\n                          break;\n                        }\n\n                        _context3.next = 23;\n                        return _awaitAsyncGenerator(reader.next(header.size));\n\n                      case 23:\n                        _yield$_awaitAsyncGen2 = _context3.sent;\n                        _done = _yield$_awaitAsyncGen2.done;\n                        gnuLongPathBytes = _yield$_awaitAsyncGen2.value;\n\n                        if (!_done) {\n                          _context3.next = 28;\n                          break;\n                        }\n\n                        return _context3.abrupt(\"return\", {\n                          v: void 0\n                        });\n\n                      case 28:\n                        gnuLongPath = Headers.decodeLongPath(gnuLongPathBytes, options.filenameEncoding);\n                        _context3.next = 31;\n                        return _awaitAsyncGenerator(discardPadding(reader, header.size));\n\n                      case 31:\n                        return _context3.abrupt(\"return\", \"continue\");\n\n                      case 32:\n                        if (!(header.type === 'gnu-long-link-path')) {\n                          _context3.next = 44;\n                          break;\n                        }\n\n                        _context3.next = 35;\n                        return _awaitAsyncGenerator(reader.next(header.size));\n\n                      case 35:\n                        _yield$_awaitAsyncGen3 = _context3.sent;\n                        _done2 = _yield$_awaitAsyncGen3.done;\n                        gnuLongLinkPathBytes = _yield$_awaitAsyncGen3.value;\n\n                        if (!_done2) {\n                          _context3.next = 40;\n                          break;\n                        }\n\n                        return _context3.abrupt(\"return\", {\n                          v: void 0\n                        });\n\n                      case 40:\n                        gnuLongLinkPath = Headers.decodeLongPath(gnuLongLinkPathBytes, options.filenameEncoding);\n                        _context3.next = 43;\n                        return _awaitAsyncGenerator(discardPadding(reader, header.size));\n\n                      case 43:\n                        return _context3.abrupt(\"return\", \"continue\");\n\n                      case 44:\n                        if (!(header.type === 'pax-global-header')) {\n                          _context3.next = 56;\n                          break;\n                        }\n\n                        _context3.next = 47;\n                        return _awaitAsyncGenerator(reader.next(header.size));\n\n                      case 47:\n                        _yield$_awaitAsyncGen4 = _context3.sent;\n                        _done3 = _yield$_awaitAsyncGen4.done;\n                        paxGlobalBytes = _yield$_awaitAsyncGen4.value;\n\n                        if (!_done3) {\n                          _context3.next = 52;\n                          break;\n                        }\n\n                        return _context3.abrupt(\"return\", {\n                          v: void 0\n                        });\n\n                      case 52:\n                        paxGlobal = Headers.decodePax(paxGlobalBytes, options.filenameEncoding);\n                        _context3.next = 55;\n                        return _awaitAsyncGenerator(discardPadding(reader, header.size));\n\n                      case 55:\n                        return _context3.abrupt(\"return\", \"continue\");\n\n                      case 56:\n                        if (!(header.type === 'pax-header')) {\n                          _context3.next = 69;\n                          break;\n                        }\n\n                        _context3.next = 59;\n                        return _awaitAsyncGenerator(reader.next(header.size));\n\n                      case 59:\n                        _yield$_awaitAsyncGen5 = _context3.sent;\n                        _done4 = _yield$_awaitAsyncGen5.done;\n                        paxBytes = _yield$_awaitAsyncGen5.value;\n\n                        if (!_done4) {\n                          _context3.next = 64;\n                          break;\n                        }\n\n                        return _context3.abrupt(\"return\", {\n                          v: void 0\n                        });\n\n                      case 64:\n                        pax = Headers.decodePax(paxBytes, options.filenameEncoding);\n                        if (paxGlobal) pax = _objectSpread({}, paxGlobal, pax);\n                        _context3.next = 68;\n                        return _awaitAsyncGenerator(discardPadding(reader, header.size));\n\n                      case 68:\n                        return _context3.abrupt(\"return\", \"continue\");\n\n                      case 69:\n                        if (gnuLongPath) {\n                          header.name = gnuLongPath;\n                          gnuLongPath = null;\n                        }\n\n                        if (gnuLongLinkPath) {\n                          header.linkname = gnuLongLinkPath;\n                          gnuLongLinkPath = null;\n                        }\n\n                        if (pax) {\n                          if (pax.path) header.name = pax.path;\n                          if (pax.linkpath) header.linkname = pax.linkpath;\n                          if (pax.size) header.size = parseInt(pax.size, 10);\n                          header.pax = pax;\n                          pax = null;\n                        }\n\n                        if (!(!header.size || header.type === 'directory')) {\n                          _context3.next = 76;\n                          break;\n                        }\n\n                        _context3.next = 75;\n                        return {\n                          header: header,\n                          body: _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                            return _regeneratorRuntime().wrap(function _callee$(_context) {\n                              while (1) {\n                                switch (_context.prev = _context.next) {\n                                  case 0:\n                                  case \"end\":\n                                    return _context.stop();\n                                }\n                              }\n                            }, _callee);\n                          }))()\n                        };\n\n                      case 75:\n                        return _context3.abrupt(\"return\", \"continue\");\n\n                      case 76:\n                        bytesRemaining = header.size;\n                        bodyConsumed = defer(); // Prefetch the first chunk.\n                        // This allows us to stream entries for small files from the tar without\n                        // explicitly streaming the body of each.\n\n                        _context3.next = 80;\n                        return _awaitAsyncGenerator(reader.nextLte(Math.min(bytesRemaining, options.highWaterMark)));\n\n                      case 80:\n                        firstChunk = _context3.sent;\n                        bytesRemaining -= firstChunk.value.length;\n                        if (!bytesRemaining) bodyConsumed.resolve();\n                        body = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                          var _yield$_awaitAsyncGen6, _done5, _value;\n\n                          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                            while (1) {\n                              switch (_context2.prev = _context2.next) {\n                                case 0:\n                                  _context2.prev = 0;\n                                  _context2.next = 3;\n                                  return firstChunk.value;\n\n                                case 3:\n                                  if (!bytesRemaining) {\n                                    _context2.next = 17;\n                                    break;\n                                  }\n\n                                  _context2.next = 6;\n                                  return _awaitAsyncGenerator(reader.nextLte(bytesRemaining));\n\n                                case 6:\n                                  _yield$_awaitAsyncGen6 = _context2.sent;\n                                  _done5 = _yield$_awaitAsyncGen6.done;\n                                  _value = _yield$_awaitAsyncGen6.value;\n\n                                  if (!_done5) {\n                                    _context2.next = 12;\n                                    break;\n                                  }\n\n                                  bytesRemaining = 0;\n                                  return _context2.abrupt(\"return\");\n\n                                case 12:\n                                  bytesRemaining -= _value.length;\n                                  _context2.next = 15;\n                                  return _value;\n\n                                case 15:\n                                  _context2.next = 3;\n                                  break;\n\n                                case 17:\n                                  _context2.prev = 17;\n                                  bodyConsumed.resolve();\n                                  return _context2.finish(17);\n\n                                case 20:\n                                case \"end\":\n                                  return _context2.stop();\n                              }\n                            }\n                          }, _callee2, null, [[0,, 17, 20]]);\n                        }))();\n                        _context3.next = 86;\n                        return {\n                          header: header,\n                          body: body\n                        };\n\n                      case 86:\n                        _context3.next = 88;\n                        return _awaitAsyncGenerator(bodyConsumed.promise);\n\n                      case 88:\n                        if (!bytesRemaining) {\n                          _context3.next = 116;\n                          break;\n                        }\n\n                        _iteratorAbruptCompletion = false;\n                        _didIteratorError = false;\n                        _context3.prev = 91;\n                        _iterator = _asyncIterator(body);\n\n                      case 93:\n                        _context3.next = 95;\n                        return _awaitAsyncGenerator(_iterator.next());\n\n                      case 95:\n                        if (!(_iteratorAbruptCompletion = !(_step = _context3.sent).done)) {\n                          _context3.next = 100;\n                          break;\n                        }\n\n                        _ = _step.value;\n\n                      case 97:\n                        _iteratorAbruptCompletion = false;\n                        _context3.next = 93;\n                        break;\n\n                      case 100:\n                        _context3.next = 106;\n                        break;\n\n                      case 102:\n                        _context3.prev = 102;\n                        _context3.t1 = _context3[\"catch\"](91);\n                        _didIteratorError = true;\n                        _iteratorError = _context3.t1;\n\n                      case 106:\n                        _context3.prev = 106;\n                        _context3.prev = 107;\n\n                        if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                          _context3.next = 111;\n                          break;\n                        }\n\n                        _context3.next = 111;\n                        return _awaitAsyncGenerator(_iterator.return());\n\n                      case 111:\n                        _context3.prev = 111;\n\n                        if (!_didIteratorError) {\n                          _context3.next = 114;\n                          break;\n                        }\n\n                        throw _iteratorError;\n\n                      case 114:\n                        return _context3.finish(111);\n\n                      case 115:\n                        return _context3.finish(106);\n\n                      case 116:\n                        _context3.next = 118;\n                        return _awaitAsyncGenerator(discardPadding(reader, header.size));\n\n                      case 118:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _loop, null, [[1, 12], [91, 102, 106, 116], [107,, 111, 115]]);\n              });\n\n            case 3:\n              if (!true) {\n                _context4.next = 12;\n                break;\n              }\n\n              return _context4.delegateYield(_loop(), \"t0\", 5);\n\n            case 5:\n              _ret = _context4.t0;\n\n              if (!(_ret === \"continue\")) {\n                _context4.next = 8;\n                break;\n              }\n\n              return _context4.abrupt(\"continue\", 3);\n\n            case 8:\n              if (!(typeof _ret === \"object\")) {\n                _context4.next = 10;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", _ret.v);\n\n            case 10:\n              _context4.next = 3;\n              break;\n\n            case 12:\n              _context4.prev = 12;\n              _context4.next = 15;\n              return _awaitAsyncGenerator(reader.return());\n\n            case 15:\n              return _context4.finish(12);\n\n            case 16:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee3, null, [[1,, 12, 16]]);\n    }))();\n  };\n};","map":null,"metadata":{},"sourceType":"script"}