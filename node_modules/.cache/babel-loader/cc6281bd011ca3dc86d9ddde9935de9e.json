{"ast":null,"code":"import _classCallCheck from \"/home/branded/projects/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/branded/projects/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/branded/projects/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/branded/projects/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/branded/projects/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/branded/projects/ipfs/src/components/App.js\";\nimport React, { Component } from 'react';\nimport logo from '../logo.png';\nimport './App.css';\n\nvar ipfsClient = require('ipfs-http-client'); // use local host if using local ipfs node but we are using infura free gateway\n\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.captureFile = function (Event) {\n      //1. prevent defaults 2. captureFile to file constant 3. define readerobject \n      // Prevent default events\n      Event.preventDefault(); // fetch file from event and first file to be saved in file constant.\n\n      var File = Event.target.files[0]; //The FileReader() constructor creates a new FileReader. syntax : new FileReader()\n      //file reader object lets web applns read contents of file stored on user computer.\n\n      var reader = new window.FileReader(); //readAsArrayBuffer() method is used to start reading the contents of a specified Blob or File . \n      //When the read operation is finished, the readyState becomes DONE , and the loadend is triggered. \n      //At that time, the result attribute contains an ArrayBuffer representing the file's data\n\n      reader.readAsArrayBuffer(File); //triggers below function to print buffer word and its conversion results in console window.\n\n      reader.onloadend = function () {\n        // putting file on ipfs is two step process. first upload then submit . \n        //In order to talk these to eachother, we need to use react state object\n        // console.log ('buffer', Buffer(reader.result)) hence we goona put this in state object\n        _this.setState = {\n          buffer: Buffer(reader.result)\n        };\n      };\n    };\n\n    _this.onSubmit = function (Event) {\n      Event.preventDefault();\n      console.log('submitting the form...');\n      ipfs.add(_this.state.buffer, function (error, result) {\n        console.log('ipfs.result', result);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n      });\n    };\n\n    _this.state = {\n      buffer: null\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand col-sm-3 col-md-2 mr-0\",\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Meme of the day\")), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"\\xA0\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Meme of the day \"), React.createElement(\"form\", {\n        onSubmit: this.Onsubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/branded/projects/ipfs/src/components/App.js"],"names":["React","Component","logo","ipfsClient","require","ipfs","host","port","protocol","App","props","captureFile","Event","preventDefault","File","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","onSubmit","console","log","add","state","error","Onsubmit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from '../logo.png';\nimport './App.css';\nconst ipfsClient = require('ipfs-http-client')\n// use local host if using local ipfs node but we are using infura free gateway\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol:'https'})\n\n\nclass App extends Component {\n\n  constructor (props){\n    super (props);\n    this.state = {\n    buffer : null\n    };\n  }\n  captureFile = (Event) => {\n    //1. prevent defaults 2. captureFile to file constant 3. define readerobject \n    // Prevent default events\n    Event.preventDefault()\n    // fetch file from event and first file to be saved in file constant.\n    const File = Event.target.files[0]\n    //The FileReader() constructor creates a new FileReader. syntax : new FileReader()\n    //file reader object lets web applns read contents of file stored on user computer.\n    const reader = new window.FileReader()\n    //readAsArrayBuffer() method is used to start reading the contents of a specified Blob or File . \n    //When the read operation is finished, the readyState becomes DONE , and the loadend is triggered. \n    //At that time, the result attribute contains an ArrayBuffer representing the file's data\n    reader.readAsArrayBuffer(File)\n    //triggers below function to print buffer word and its conversion results in console window.\n    reader.onloadend = () => {\n    // putting file on ipfs is two step process. first upload then submit . \n    //In order to talk these to eachother, we need to use react state object\n    // console.log ('buffer', Buffer(reader.result)) hence we goona put this in state object\n    this.setState = ({buffer:Buffer(reader.result)})\n    } \n  }\n  onSubmit = (Event) => {\n    Event.preventDefault()\n    console.log ('submitting the form...')\n    ipfs.add (this.state.buffer, (error, result) => {\n    console.log('ipfs.result',result)\n    if (error) {\n      console.error (error)\n      return\n    }\n  \n  })\n}\n\n\n  \n  render() {\n    return (  \n      <div> \n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.dappuniversity.com/bootcamp\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Meme of the day \n          </a>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"http://www.dappuniversity.com/bootcamp\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </a>\n                <p>&nbsp;</p> \n                 { \n                 //&nbsp is used to give space // also for commenting in app.js file you need to // inside curly braces\n                }\n               <h2>Meme of the day </h2>\n                 {/* whenever form submitted it triggers onsubmit function then file which is in buffer will be put it on ipfs*/}\n                   <form onSubmit = {this.Onsubmit} >\n                 {/* whenever file uploaded  trigger capturefile function which captures file and further converted to buffer*/}\n                   <input type='file' onChange={this.captureFile}/> \n                   <input type='submit' />\n                   </form>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}